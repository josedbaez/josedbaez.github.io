<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>José Domínguez</title>
  
  <subtitle>C#, .net, sitecore &amp; some other stuff</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://josedbaez.com/"/>
  <updated>2020-02-07T16:30:16.939Z</updated>
  <id>https://josedbaez.com/</id>
  
  <author>
    <name>José Domínguez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Extending Sitecore CMP connector to synchronize images</title>
    <link href="https://josedbaez.com/2020/02/sitecore-content-hub-cmp-connector-extensions/"/>
    <id>https://josedbaez.com/2020/02/sitecore-content-hub-cmp-connector-extensions/</id>
    <published>2020-02-07T00:00:00.000Z</published>
    <updated>2020-02-07T16:30:16.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/cmp-connector.jpg" alt="Sitecore Content Hub CMP Connector"></h2><p>How to extend Sitecore’s Connect Hub CMP connector to synchronise images.<br><a id="more"></a></p><p><em>Versions used: Sitecore Experience Platform 9.2 Initial Release. Content Hub 3.2.0</em></p><p>This post is way overdue as I was supposed to release it after my last talk at <a href="https://www.meetup.com/The-Sitecore-Sessions/events/266315651/" target="_blank" rel="noopener">The Sitecore Sessions</a>. Sorry for the delay 😞.</p><p>On a <a href="/2019/10/sitecore-content-hub-cmp-connector">previous post</a>, I explained how to install <a href="https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/10/Sitecore_Connect_for_Sitecore_CMP_100.aspx" target="_blank" rel="noopener">Sitecore Connect™ for Sitecore CMP</a> to automatically send entities from CMP to Sitecore. Alas, the connector only synchronises text fields. </p><p>This post explains the <a href="https://github.com/josedbaez/Sitecore.SharedSource.CMP.Connector.Extensions" target="_blank" rel="noopener">CMP connector extension</a> that synchronises Content Hub images set on <code>M.Content</code> entities. Using the same methodology, this could grow into a module and include other field types (e.g. references to other entities). <a href="https://github.com/josedbaez/Sitecore.SharedSource.CMP.Connector.Extensions" target="_blank" rel="noopener">Source Code here</a>.</p><p>This solution extends the existing CMP connector by adding a new processor to process a new mapping field type that maps an image relation to a Sitecore field using the same format supported by <a href="https://dev.sitecore.net/Downloads/Sitecore_Plugin_for_Stylelabs_DAM/20/Sitecore_Connect_for_Sitecore_DAM_200.aspx" target="_blank" rel="noopener">Sitecore connector for Content Hub DAM</a>; so DAM connector needs to be <a href="/2019/08/sitecore-content-hub-dam-connector/">installed</a>. </p><p>The default connector will process items of template type <code>/sitecore/templates/CMP/Field Mapping</code>, so we need a new template item (<code>/sitecore/templates/CMP/Image Field Mapping</code>) that our custom processor can use to identify image mapping configurations. This template has <code>Field Mapping</code> as its base template plus 2 extra fields: <code>AssetIndex</code> to specify the index of the asset relation to grab (if multiple are allowed), and <code>RenditionToUse</code> to specify which asset rendition public link to use. <code>CMP Field Name</code> is used as the relation to find the asset on (<code>CmpContentToLinkedAsset</code> is available OOTB). </p><p>The <a href="https://github.com/josedbaez/Sitecore.SharedSource.CMP.Connector.Extensions/blob/master/src/Sitecore.SharedSource.CMP.Connector.CustomFields/App_Config/Include/Feature/Sitecore.SharedSource.CMP.Connector.CustomFields.config" target="_blank" rel="noopener">new processor</a> runs after the default ones.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pipelines</span>&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;<span class="name">cmp.importEntity</span>&gt;</span>                </span><br><span class="line">        <span class="tag">&lt;<span class="name">processor</span> <span class="attr">type</span>=<span class="string">"Sitecore.SharedSource.CMP.Connector.CustomFields.Pipelines.SaveImageFieldValues, Sitecore.SharedSource.CMP.Connector.CustomFields"</span> <span class="attr">patch:after</span>=<span class="string">"processor[@type='Sitecore.Connector.CMP.Pipelines.ImportEntity.SaveFieldValues, Sitecore.Connector.CMP']"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cmp.importEntity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pipelines</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>This processor <a href="https://github.com/josedbaez/Sitecore.SharedSource.CMP.Connector.Extensions/blob/master/src/Sitecore.SharedSource.CMP.Connector.CustomFields/Pipelines/SaveImageFieldValues.cs" target="_blank" rel="noopener">SaveImageFieldValues.cs</a> fetches all <code>Field Mapping</code> items (from <code>ImportEntityPipelineArgs</code> object) under the <code>Entity Mapping</code> item being processed, reads required field values to find the rendition from the relation and stores the formatted public link URL into the specified sitecore field.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (Item item <span class="keyword">in</span> <span class="keyword">from</span> i <span class="keyword">in</span> args.EntityMappingItem.Children</span><br><span class="line">                                              <span class="keyword">where</span> i.TemplateID == Constants.ImageFieldMappingTypeID</span><br><span class="line">                                              <span class="keyword">select</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> cmpFieldName = item[Sitecore.Connector.CMP.Constants.FieldMappingCmpFieldNameFieldId];</span><br><span class="line">    <span class="keyword">var</span> sitecoreFieldName = item[Sitecore.Connector.CMP.Constants.FieldMappingSitecoreFieldNameFieldId];</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">var</span> renditionField = item[Constants.FieldMappingSitecoreRenditionFieldID];</span><br><span class="line">    <span class="keyword">var</span> publicLink = GetPublicLinkData(contentHubHost, args.Entity, cmpFieldName, renditionField, assetIndexField).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(publicLink != <span class="literal">null</span> &amp;&amp; !<span class="keyword">string</span>.IsNullOrEmpty(publicLink.URL))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> imgElement = GetContentHubDamImageElement(contentHubHost, publicLink);</span><br><span class="line">        args.Item[item[Sitecore.Connector.CMP.Constants.FieldMappingSitecoreFieldNameFieldId]] = imgElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, the code is quite simple. It loops through <code>ImageFieldMapping</code> items and reads the pertinent fields; gets or creates a public link to the defined rendition, and stores the formatted image tag into the image field value.</p><p><code>&lt;image stylelabs-content-type=&quot;Image&quot; mediaid=&quot;&quot; src=&quot;https://HOST/api/public/content/364944895?v=779a&quot; height=&quot;1100&quot; alt=&quot;&quot; stylelabs-content-id=&quot;1235&quot; width=&quot;790&quot; thumbnailsrc=&quot;https://HOST/api/gateway/1235/thumbnail&quot; /&gt;</code></p><p>====================<br>References:<br><a href="https://github.com/josedbaez/Sitecore.SharedSource.CMP.Connector.Extensions" target="_blank" rel="noopener">https://github.com/josedbaez/Sitecore.SharedSource.CMP.Connector.Extensions</a></p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/cmp-connector.jpg&quot; alt=&quot;Sitecore Content Hub CMP Connector&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to extend Sitecore’s Connect Hub CMP connector to synchronise images.&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Content Hub" scheme="https://josedbaez.com/categories/Sitecore/Content-Hub/"/>
    
    
      <category term="stylelabs" scheme="https://josedbaez.com/tags/stylelabs/"/>
    
      <category term="cmp" scheme="https://josedbaez.com/tags/cmp/"/>
    
      <category term="connector" scheme="https://josedbaez.com/tags/connector/"/>
    
  </entry>
  
  <entry>
    <title>Tweet from Sitecore Content Hub CMP</title>
    <link href="https://josedbaez.com/2019/11/content-hub-cmp-to-twitter/"/>
    <id>https://josedbaez.com/2019/11/content-hub-cmp-to-twitter/</id>
    <published>2019-11-22T00:00:00.000Z</published>
    <updated>2019-11-23T11:09:13.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/sitecore-twitter-logos.png" alt="Combined Sitecore Twitter Logos"></h2><p>How to publish text and an image from Connect Hub CMP to twitter. Sample code using azure, c# and Content Hub’s Web Client SDK.<br><a id="more"></a></p><p><em>Versions used: Content Hub 3.2</em></p><p>You can publish content to twitter (or any other channels) by pushing CMP content to an intermediate layer (e.g. azure function), or straight to the channel -using a Content Hub Action Script or API. I prefer doing it outside Content Hub. Why? to free up resources and delegate responsibility: CMP is responsible for pushing content but does not care what happens to it afterwards. </p><p>The solution in this post uses an <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-queues-topics-subscriptions" target="_blank" rel="noopener">Azure Service Bus topic</a> to receive messages from CMP and pass them on to subscribers. You don’t necessarily need a topic but it’s a good idea if you have multiple channels where the same data must be published to. <a href="https://github.com/josedbaez/Sitecore.ContentHub.Twitter" target="_blank" rel="noopener">Full source code here</a></p><p><img class="boxed" src="/images/azure-queue-topics.png" style="max-width:480px" alt="Azure Queue and Topics"><br><!-- Source: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview --></p><p>It is also the mechanism used by  <a href="https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/10/Sitecore_Connect_for_Sitecore_CMP_100.aspx" target="_blank" rel="noopener">Sitecore Connect™ for Sitecore CMP</a> connector explained on my <a href="/2019/10/sitecore-content-hub-cmp-connector">previous post</a>, so I will be linking to that one to avoid duplicating content.</p><p><em>Steps</em></p><ul><li>Create a <a href="https://developer.twitter.com/en/apps" target="_blank" rel="noopener">twitter app</a> and grab all keys and tokens under <code>Keys and tokens</code>.</li><li>Create a Content Hub trigger and action to send specific content entities to azure. <a href="/2019/10/sitecore-content-hub-cmp-connector#Azure-Services-Bus#Content-Hub">Explanation here</a>.</li><li>Create an Azure Service Bus service that allows the creation of topics. For this, you will need Standard or Premium service tier. You can follow the steps listed <a href="/2019/10/sitecore-content-hub-cmp-connector#Azure-Services-Bus">here</a>. On the last point, name your subscription <code>twitter</code> instead of <code>sitecore</code>.</li><li>Create a new Azure Function App.</li><li>Create a new <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus#trigger" target="_blank" rel="noopener">Service Bus Trigger</a> function, inside the newly created Function App, that subscribes to the topic <code>cmp_content</code> and <code>twitter</code> subscription created on step 1. Choose whichever Development Environment you wish. I’d recommend outside the portal so you can source control it. You will need to use either <a href="https://docs.stylelabs.com/content/integrations/rest-api/about.html?v=3.2.1" target="_blank" rel="noopener">REST API</a> or <a href="https://docs.stylelabs.com/content/integrations/web-sdk/index.html?v=3.2.1" target="_blank" rel="noopener">Web Client SDK</a>. <strong>You can write the azure function on any language if you use the REST API</strong>. </li></ul><p>The following example uses the Web Client SDK -so it’s written in C#- and uses <a href="https://www.nuget.org/packages/TweetinviAPI/" target="_blank" rel="noopener">Tweetinvi</a> library. I’ve removed some validations to make it shorter but you can find full <a href="(https://github.com/josedbaez/Sitecore.ContentHub.Twitter">source code here</a>).</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">FunctionName(<span class="meta-string">"TweetContent"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Run</span>(<span class="params">[ServiceBusTrigger(<span class="string">"cmp_content"</span>, <span class="string">"twitter"</span>, Connection = <span class="string">"Manage_Send_Listen_ConnectionString"</span></span>)]</span></span><br><span class="line"><span class="function">    ServiceBusMessageRequest chMessage, ILogger logger)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> contentId = chMessage.Message.TargetId;</span><br><span class="line">    <span class="keyword">var</span> contentEntity = <span class="keyword">await</span> GetContentEntity(contentId, logger);</span><br><span class="line"></span><br><span class="line">    Tweetinvi.Auth.SetUserCredentials(<span class="string">"TwitterConsumerKey"</span>, <span class="string">"TwitterConsumerSecret"</span>, <span class="string">"TwitterUserAccessToken"</span>, <span class="string">"TwitterUserAccessSecret"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tweetImage = <span class="keyword">await</span> GetTwitterImage(contentEntity);</span><br><span class="line">    <span class="keyword">var</span> tweet = contentEntity.GetPropertyValue&lt;<span class="keyword">string</span>&gt;(DescFieldId);</span><br><span class="line">    Tweetinvi.Tweet.PublishTweet(tweet, <span class="keyword">new</span> PublishTweetOptionalParameters&#123; Medias = &#123; tweetImage &#125; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;IEntity&gt; <span class="title">GetContentEntity</span>(<span class="params"><span class="keyword">long</span> entityId, ILogger logger</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> propertyLoad = <span class="keyword">new</span> PropertyLoadOption(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Advertisement_Body"</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> relationLoad = <span class="keyword">new</span> RelationLoadOption(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"CmpContentToLinkedAsset"</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> loadConfig = <span class="keyword">new</span> EntityLoadConfiguration(CultureLoadOption.Default, propertyLoad, relationLoad);</span><br><span class="line">    IEntity entity = <span class="keyword">await</span> MConnector.Client.Entities.GetAsync(entityId, loadConfig);</span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;IMedia&gt; <span class="title">GetTwitterImage</span>(<span class="params">IEntity content</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> relation = content.GetRelation&lt;IParentToManyChildrenRelation&gt;(<span class="string">"CmpContentToLinkedAsset"</span>);</span><br><span class="line">    <span class="keyword">if</span>(relation != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> ids = relation.GetIds();</span><br><span class="line">        <span class="keyword">var</span> asset = <span class="keyword">await</span> MConnector.Client.Entities.GetAsync(ids.First());</span><br><span class="line">        <span class="keyword">var</span> downloadReviewRenditions = asset.Renditions.Where(x =&gt; x.Name.Equals(<span class="string">"downloadPreview"</span>));</span><br><span class="line">        <span class="keyword">if</span>(downloadReviewRenditions != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> href = downloadReviewRenditions.First().Items.First().Href;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> webClient = <span class="keyword">new</span> WebClient())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] imageBytes = webClient.DownloadData(href);</span><br><span class="line">                <span class="keyword">var</span> media = Upload.UploadBinary(imageBytes);</span><br><span class="line">                <span class="keyword">return</span> media;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Content Hub sends a JSON object that contains the EntityID (among other properties not needed), so using the SDK, the code gets the Entity and the property (Advertisement_Body) to be used.</p><p>It then logs in to twitter to be able to upload the image before it can we linked to the tweet. Retrieves the <code>downloadPreview</code> rendition of the first image linked (via attachments) to the Content entity and upload the byte array to twitter.</p><p>Finally, it publishes the tweet with the text and the image.</p><p>====================</p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/sitecore-twitter-logos.png&quot; alt=&quot;Combined Sitecore Twitter Logos&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to publish text and an image from Connect Hub CMP to twitter. Sample code using azure, c# and Content Hub’s Web Client SDK.&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Content Hub" scheme="https://josedbaez.com/categories/Sitecore/Content-Hub/"/>
    
    
      <category term="azure" scheme="https://josedbaez.com/tags/azure/"/>
    
      <category term="stylelabs" scheme="https://josedbaez.com/tags/stylelabs/"/>
    
      <category term="cmp" scheme="https://josedbaez.com/tags/cmp/"/>
    
      <category term="servicebus" scheme="https://josedbaez.com/tags/servicebus/"/>
    
      <category term="twitter" scheme="https://josedbaez.com/tags/twitter/"/>
    
  </entry>
  
  <entry>
    <title>404 error when clicking Test Connection on Actions</title>
    <link href="https://josedbaez.com/2019/10/content-hub-test-connection-not-found/"/>
    <id>https://josedbaez.com/2019/10/content-hub-test-connection-not-found/</id>
    <published>2019-10-28T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/headless-police-woman.jpg" alt="Headless Police Woman"></h2><p>Why is Test Connection button on an Action returning a not found error when clicked.<br><a id="more"></a></p><p><em>Versions used: Content Hub 3.2</em></p><p>You want to invoke an API from Content Hub and have created an <code>Action</code> that points to it. <code>API URL</code> is fine, <code>Method</code> is correct, <code>Headers</code> aren’t expected so is left empty. You then click on <code>Test Connection</code> and get <code>Connection failed</code> error.</p><p>Why?!</p><p>Regardless of the selected method, and expected by the API when called, <strong><code>Test Connection</code> button sends a <code>HEAD</code> request to the API</strong>. Set your API endpoint to allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD" target="_blank" rel="noopener">HEAD</a> requests and you are all set.</p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/headless-police-woman.jpg&quot; alt=&quot;Headless Police Woman&quot;&gt;&lt;/h2&gt;&lt;p&gt;Why is Test Connection button on an Action returning a not found error when clicked.&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Content Hub" scheme="https://josedbaez.com/categories/Sitecore/Content-Hub/"/>
    
    
      <category term="stylelabs" scheme="https://josedbaez.com/tags/stylelabs/"/>
    
      <category term="action" scheme="https://josedbaez.com/tags/action/"/>
    
      <category term="apicall" scheme="https://josedbaez.com/tags/apicall/"/>
    
  </entry>
  
  <entry>
    <title>Sitecore connector for Content Hub CMP</title>
    <link href="https://josedbaez.com/2019/10/sitecore-content-hub-cmp-connector/"/>
    <id>https://josedbaez.com/2019/10/sitecore-content-hub-cmp-connector/</id>
    <published>2019-10-20T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/cmp-connector.jpg" alt="Sitecore Content Hub CMP Connector"></h2><p>How to install Sitecore’s Connect Hub CMP connector “Sitecore Connect™ for Sitecore CMP 1.0.0”<br><a id="more"></a></p><p><em>Versions used: Sitecore Experience Platform 9.2 Initial Release. Content Hub 3.2</em></p><p><a href="https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/10/Sitecore_Connect_for_Sitecore_CMP_100.aspx" target="_blank" rel="noopener">Sitecore Connect™ for Sitecore CMP</a> pulls content from Content Hub and stores them in Sitecore buckets. The connector requires an azure service bus that supports topics. See below.</p><p>What gets synced and when is configured in Content Hub via triggers. Content Hub sends configured content to an Azure Topic. On Sitecore side, the connector is listening to this topic and creates/updates items when messages are added. It then creates a message on another topic with information about what was done.</p><p><strong>For the connector to work, you need to configure the following 3 places::</strong></p><ul><li>Azure Services Bus</li><li>Content Hub</li><li>Sitecore Content Management</li></ul><h2 id="Azure-Services-Bus"><a href="#Azure-Services-Bus" class="headerlink" title="Azure Services Bus"></a>Azure Services Bus</h2><p>As mentioned before, you need a subscription that allows to select either Standard or Premium Pricing tier. This is because the connector uses Topics which are not avaiable on Basic tier.<br><img class="boxed" src="/images/azure-service-bus-tiers.png" style="max-width:480px" alt="Azure Service Bus Tiers"></p><ul><li>On azure portal, go to Resources and click on Add. Search for <code>Service Bus</code>, then click on create.</li><li>Enter desired name for your Service Bus service. Select Subscription, Resource Group, Location and either <strong>Standard or Premium pricing tier</strong>.</li><li>Once created, go to the service and click on <code>Shared access policies</code>.<br>– Click on Add. Create a new Policy named <code>ManageSendListenAccessKey</code> with <code>Manage</code>, <code>Send</code> and <code>Listen</code> access. Or use default <code>RootManageSharedAccessKey</code>.<br>– Click on newly created <code>ManageSendAccessKey</code> policy and copy one of the <code>connection strings</code>. You will need this later. <sup><a name="service-bus-connection-string">[connection string]</a></sup></li><li>Now click on <code>Topics</code>.<br>– Create a topic and call it <code>cmp_content</code>. Set desired configuration on the topic. <sup><a name="cmp-topic">cmp topic</a></sup><br>– Create another topic and call it <code>sitecore_notifications</code>. Set desired configuration on the topic. <sup><a name="sitecore-notifications-topic">sitecore notifications topic</a></sup><br>– Go inside the <code>cmp_content</code> topic and create a subscription called <code>sitecore</code>. <sup><a name="cmp-topic-subscription">cmp topic subscription</a></sup></li></ul><p>The service bus is now ready. CMP will send messages to <code>cmp_content</code> topic and the connector will subscribe to <code>sitecore</code> subscription and act when messages are added to the topic.</p><h2 id="Content-Hub"><a href="#Content-Hub" class="headerlink" title="Content Hub"></a>Content Hub</h2><p>In Content Hub, you need an <code>Action</code> of type <code>Azure Service Bus</code> and a <code>Trigger</code> that invokes this action when the desired content should send a message to the service bus.</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li>Log in to Content Hub and go to  <strong>Manage</strong> -&gt; <strong>Actions</strong>.</li><li>Click on new Action. Enter desired name (e.g. <code>CMP - Content to Service Bus</code>) and label. Under type, select <code>Azure Service Bus</code>.<br>– Enter <a href="#service-bus-connection-string">copied</a> Service Bus connection string.<br>– Select <code>Topic</code> as <code>Destination type</code>.<br>– Enter <code>cmp_content</code> <sup><a href="#cmp-topic">cmp topic</a></sup> in <code>Destination</code> field.<br>– Test Connection and click Save when done.</li></ul><h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h3><ul><li>Log in to Content Hub and go to  <strong>Manage</strong> -&gt; <strong>Triggers</strong>.</li><li>Click on new Trigger. Enter desired name (e.g. <code>CMP - On Published Content</code>) and description. Under objective, select <code>Entity creation</code> and <code>Entity modification</code>.</li><li>Set execution type to <code>In background</code>.</li><li>Click on <code>Conditions</code> tab and add a <code>Definition</code> with <code>Content (M.Content)</code>. If left like this, the trigger will execute whenever an entity of type <code>M.Content</code>, CMP’s default, is created or modified. You can add as many conditions as you wish if you want to restrict which content is sent to the service bus. For example, if you want only Published content to be sent to the bus, add a condition like:  <code>Active state (MContentToActiveState)</code> <code>added item</code> <code>contains</code> <code>any</code> <code>Published</code>.</li><li>Click on <code>Actions</code> tab and add created action <code>CMP - Content to Service Bus</code> to <code>Post Actions</code>.</li><li>Save trigger and make sure it’s enabled.</li></ul><h2 id="Sitecore-Configuration"><a href="#Sitecore-Configuration" class="headerlink" title="Sitecore Configuration"></a>Sitecore Configuration</h2><p>Now that Azure and Content Hub have been configured, you are ready to install and configure the connector; and then, create Content Hub to Item mappings.</p><h3 id="Connector-Configuration"><a href="#Connector-Configuration" class="headerlink" title="Connector Configuration"></a>Connector Configuration</h3><ul><li>Download Sitecore Connect™ for Sitecore CMP 1.0.0 from <a href="https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/10/Sitecore_Connect_for_Sitecore_CMP_100.aspx" target="_blank" rel="noopener">sitecore website</a>.</li><li>Install the package on your CM server via Sitecore package installer.</li><li>Navigate to item <code>/sitecore/system/Modules/CMP/Config</code><br>– Populate the fields as follows:<br><code>Client Id</code> and <code>Client Secret</code> <strong>:</strong> from a Content Hub <code>OAuth client</code>. Find or create one under <strong>Manage</strong> -&gt; <strong>OAuth Clients</strong>.<br><code>User Name</code> and <code>Password</code> <strong>:</strong> from a Content Hub <code>User</code> with sufficient permissions to read content from entities being pushed.<br><code>Content Hub URI</code> <strong>:</strong> the full URL of your Content Hub instance without trailing slash.<br><code>Connection string</code> <strong>:</strong> <a href="#service-bus-connection-string">service bus</a> connection string.<br><code>Incoming topic name</code> <strong>:</strong> <em>cmp_content</em> <sup><a href="#cmp-topic">cmp topic</a></sup>.<br><code>Incoming subscription name</code> <strong>:</strong> <em>sitecore</em> <sup><a href="#cmp-topic-subscription">cmp topic subscription</a></sup>.<br><code>Outgoing topic name</code> <strong>:</strong> <em>cmp_content</em> <sup><a href="#sitecore-notifications-topic">sitecore notifications topic</a></sup>.<br><code>Default Language</code> <strong>:</strong> <em>en</em>. This item language will be used if no language is specified in Content Hub. Note: <code>en</code> is default in Sitecore whereas <code>en-US</code> is default in Content Hub.</li></ul><h3 id="Templates-and-Mappings"><a href="#Templates-and-Mappings" class="headerlink" title="Templates and Mappings"></a>Templates and Mappings</h3><ul><li> Create a new template that contains <code>/sitecore/templates/CMP/Content Hub Entity</code> as a Base template under desired templates folder. e.g. <code>Advertisement</code>. <sup><a name="sitecore-template">sitecore template</a></sup><ul><li>Add the fields you want to sync from Content Hub. Select appropriate field types (Only text fields are supported). </li> <li>Mark as <code>Bucketable</code>. </li></ul></li><li>Create a new Bucket under <code>/sitecore/content/CMP</code>. e.g. <code>Advertisements</code>.</li><li>Navigate to item <code>/sitecore/system/Modules/CMP/Config</code> and create a new <code>/sitecore/templates/CMP/Entity Mapping</code> item under it. e.g. <code>Advertisement</code>.<ul><li>Populate the fields as follows:<ul><li><code>Content Type Id</code> <strong>:</strong> <em>M.ContentType.Advertisement</em>. To find this id, go to your Content Hub instance and navigate to <strong>Manage</strong> -&gt; <strong>Taxonomy</strong> -&gt; <strong>M.ContentType</strong>, and click on the info icon next to the desired type. The <code>identifier</code> is what you need.</li><li><code>Bucket</code> <strong>:</strong> <em>/sitecore/content/CMP/Advertisements</em>. The parent location where you want the items to be created.</li><li><code>Template</code> the newly created sitecore template containing the fields to map to<sup><a href="#sitecore-template">sitecore template</a></sup>.</li></ul></li><li>Create an item of type <code>/sitecore/templates/CMP/Field Mapping</code> under it. e.g. <code>Title</code>.<ul><li>Populate the fields as follows:<ul><li><code>CMP Field Name</code> <strong>:</strong> <em>Advertisement_Title</em>. To find this id, you can either find the field on the <code>M.Content</code> entity definition under <strong>Manage</strong> -&gt; <strong>Schema</strong> -&gt; <strong>M.Content</strong>, or find a content entity with the desired type, grab the entity id from the URL and navigate to <code>https://content-hub-instance/api/entities/entity_id</code> to find the property id.</li><li><code>Sitecore Field Name</code> <strong>:</strong> <em>Title</em>. The field name where the data should map to. </li></ul></li><li>Create as many items as fields are required.</li></ul></li></ul></li></ul><p>Voilà! Now your connector has been configured. Restart your sitecore instance and items should be created as soon as the Content Hub trigger executes.<br>Hint: Look at your sitecore logs to find errors and it logs a lot when something fails.</p><p>====================</p><p>References:<br><a href="https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/10/Sitecore_Connect_for_Sitecore_CMP_100.aspx" target="_blank" rel="noopener">https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/10/Sitecore_Connect_for_Sitecore_CMP_100.aspx</a></p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/cmp-connector.jpg&quot; alt=&quot;Sitecore Content Hub CMP Connector&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to install Sitecore’s Connect Hub CMP connector “Sitecore Connect™ for Sitecore CMP 1.0.0”&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Content Hub" scheme="https://josedbaez.com/categories/Sitecore/Content-Hub/"/>
    
    
      <category term="azure" scheme="https://josedbaez.com/tags/azure/"/>
    
      <category term="stylelabs" scheme="https://josedbaez.com/tags/stylelabs/"/>
    
      <category term="cmp" scheme="https://josedbaez.com/tags/cmp/"/>
    
      <category term="servicebus" scheme="https://josedbaez.com/tags/servicebus/"/>
    
      <category term="connector" scheme="https://josedbaez.com/tags/connector/"/>
    
  </entry>
  
  <entry>
    <title>Sitecore connector for Content Hub DAM</title>
    <link href="https://josedbaez.com/2019/08/sitecore-content-hub-dam-connector/"/>
    <id>https://josedbaez.com/2019/08/sitecore-content-hub-dam-connector/</id>
    <published>2019-08-19T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/dam-connector.png" alt="Sitecore Content Hub DAM Connector"></h2><p>How to install Sitecore’s Connect Hub DAM connector “Sitecore Connect™ for Sitecore DAM 2.0.0”<br><a id="more"></a></p><p><em>Versions used: Sitecore Experience Platform 9.2 Initial Release. Content Hub 3.2</em></p><p><a href="https://dev.sitecore.net/Downloads/Sitecore_Plugin_for_Stylelabs_DAM/20/Sitecore_Connect_for_Sitecore_DAM_200.aspx" target="_blank" rel="noopener">Sitecore Connect™ for Sitecore DAM</a> gives users the ability to insert Content Hub assets from Sitecore Content Management, and to upload assets from CM to Content Hub. It works on any Sitecore image and RTE field types; in both Content and Experience editors. To achieve this, the connector adds new buttons that invoke and display content hub on an iframe.</p><p>The connector will display the page set in Sitecore (explained below). Content Hub 3.2 comes with 2 pre-configured pages that can be found under: <strong>Admin</strong> -&gt; <strong>Pages</strong> -&gt; <strong>Sitecore Plugin</strong>. Here you can amend the pages as you find suitable or modify the search component configuration. I haven’t tried yet but you might be able to create a custom page to use instead of the default ones.</p><p>The connector requires configuration in both systems (Content Hub and Sitecore CM instance) to work properly:</p><h2 id="Content-Hub-Configuration"><a href="#Content-Hub-Configuration" class="headerlink" title="Content Hub Configuration"></a>Content Hub Configuration</h2><ul><li>To allow a Sitecore instance to access content hub, you must add a CORS configuration entry with your Sitecore CM instance URL.<ol><li>Navigate to: <strong>Manage</strong> -&gt; <strong>Settings</strong> -&gt; <strong>PortalConfiguration</strong> -&gt; <strong>CORSConfiguration</strong> or go to URL <a href="http://CONTENT_HUB_URL/en-us/admin/settingmanagement?setting=CORSConfiguration&amp;settingId=8748" target="_blank" rel="noopener">http://CONTENT_HUB_URL/en-us/admin/settingmanagement?setting=CORSConfiguration&amp;settingId=8748</a></li><li>Enter your CM instance URL (e.g. <a href="http://sc92.dev.local" target="_blank" rel="noopener">http://sc92.dev.local</a>) and click Save.</li></ol></li><li><p>Then, update your SSO services entries to passive mode and add an <code>ExternalRedirectKeys</code> element with your Sitecore CM instance URL.</p><ol><li>Navigate to: <strong>Manage</strong> -&gt; <strong>Settings</strong> -&gt; <strong>PortalConfiguration</strong> -&gt; <strong>Authentication</strong> or go to URL <a href="http://CONTENT_HUB_URL//en-us/admin/settingmanagement?setting=Authentication&amp;settingId=525" target="_blank" rel="noopener">http://CONTENT_HUB_URL//en-us/admin/settingmanagement?setting=Authentication&amp;settingId=525</a></li><li>Find the element <code>Providers</code> and change <code>authentication_mode</code> to <code>Passive</code> on every provider present.<br><strong>Tip:</strong> <em>I find text mode (dropdown at the top) is best to edit json configuration in content hub.</em></li><li><p>Add a new element at the bottom of the document that looks like:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"ExternalRedirectKeys": &#123;</span><br><span class="line">  "Sitecore": "http://sc92.dev.local"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here’s an example of how these 2 elements should look:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">"Providers": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"$type"</span>: <span class="string">"Stylelabs.M.Portal.Authentication.SamlAuthenticationProviderConfigurator, Stylelabs.M.Portal"</span>,</span><br><span class="line">    <span class="attr">"metadata_location"</span>: <span class="string">"https://xxxxxx"</span>,</span><br><span class="line">    <span class="attr">"sp_entity_id"</span>: <span class="string">"urn:xxxxxxx.com"</span>,</span><br><span class="line">    <span class="attr">"idp_entity_id"</span>: <span class="string">"urn:xxxxxxx.com"</span>,</span><br><span class="line">    <span class="attr">"provider_name"</span>: <span class="string">"SSO"</span>,</span><br><span class="line">    <span class="attr">"authentication_mode"</span>: <span class="string">"Passive"</span>,</span><br><span class="line">    <span class="attr">"module_path"</span>: <span class="string">"AuthServices"</span>,</span><br><span class="line">    <span class="attr">"is_enabled"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">"ExternalRedirectKeys": &#123;</span><br><span class="line">  "Sitecore": "http://sc92.dev.local"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Sitecore-Configuration"><a href="#Sitecore-Configuration" class="headerlink" title="Sitecore Configuration"></a>Sitecore Configuration</h2><p>Now that Content Hub has been configured to allow connections from the Sitecore instance, you are ready to install and configure the connector:</p><ul><li>Download Sitecore Connect™ for Sitecore DAM 2.0.0 from <a href="https://dev.sitecore.net/Downloads/Sitecore_Plugin_for_Stylelabs_DAM/20/Sitecore_Connect_for_Sitecore_DAM_200.aspx" target="_blank" rel="noopener">sitecore website</a>.</li><li>Install the package on your CM server via Sitecore package installer.<ol><li>When prompted for an existing item, select overwrite -the package will create new buttons.</li></ol></li><li>Configure connector to point to your Content Hub instance.<ol><li>Navigate to item <code>/sitecore/system/Modules/DAM/Config/DAM connector</code></li><li>Populate the fields as follows:<br><code>DAMInstance</code> The root URL to your Content Hub instance (e.g. <a href="https://MY_CONTENT_HUB.com" target="_blank" rel="noopener">https://MY_CONTENT_HUB.com</a>)<br><code>SearchPage</code> This will be the Content Hub page displayed in Sitecore. By default, it should be: <a href="https://MY_CONTENT_HUB.com/en-us/sitecore-plugin/approved-assets" target="_blank" rel="noopener">https://MY_CONTENT_HUB.com/en-us/sitecore-plugin/approved-assets</a><br><code>ExternalRedirectKey</code> This matches the entry on element <code>ExternalRedirectKeys</code> added in the json document above. If you followed this example, should be: Sitecore</li></ol></li></ul><p>Once you have done this, you will find a new button that reads <code>Browse Sitecore DAM</code> on any image field and a new icon on rich text editor fields: <img src="/images/rte-dam-icon.png"></p><p>When selecting images via the connector, it sets the field value to the selected public link of the asset.</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/images/dam-connector-demo.gif"></h1><p>References:<br><a href="https://dev.sitecore.net/Downloads/Sitecore_Plugin_for_Stylelabs_DAM/20/Sitecore_Connect_for_Sitecore_DAM_200.aspx" target="_blank" rel="noopener">https://dev.sitecore.net/Downloads/Sitecore_Plugin_for_Stylelabs_DAM/20/Sitecore_Connect_for_Sitecore_DAM_200.aspx</a></p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/dam-connector.png&quot; alt=&quot;Sitecore Content Hub DAM Connector&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to install Sitecore’s Connect Hub DAM connector “Sitecore Connect™ for Sitecore DAM 2.0.0”&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Content Hub" scheme="https://josedbaez.com/categories/Sitecore/Content-Hub/"/>
    
    
      <category term="stylelabs" scheme="https://josedbaez.com/tags/stylelabs/"/>
    
      <category term="connector" scheme="https://josedbaez.com/tags/connector/"/>
    
      <category term="dam" scheme="https://josedbaez.com/tags/dam/"/>
    
  </entry>
  
  <entry>
    <title>Content Hub Triggers, Actions and Scripts</title>
    <link href="https://josedbaez.com/2019/08/trigger-action-script/"/>
    <id>https://josedbaez.com/2019/08/trigger-action-script/</id>
    <published>2019-08-18T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/trigger-action-script.jpg" alt="Content Hub Trigger, Action, Script"></h2><p>What are Content Hub Triggers, Actions and Scripts, and what are they used for?<br><a id="more"></a></p><p>In Content Hub, triggers, actions and scripts are usually used together: a trigger invokes an action which executes a script<sup> An action can execute more things than just scripts</sup>.</p><h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers:"></a>Triggers:</h2><blockquote><p>A trigger is a set of actions that are automatically executed after specific events and under specific conditions. <sup><a href="#triggers">1</a></sup></p></blockquote><p>Triggers are configured in a similar way to Sitecore Rules Engine. You specify the event it responds to (<code>Objective</code>), the conditions that specify if the trigger should run, and the actions that will run if the conditions are met.</p><p>Triggers can be configured using the UI and are found under <strong>Admin</strong> -&gt; <strong>Triggers</strong>.</p><p>They can be executed <code>In process</code> or <code>In background</code>. <strong>In process</strong> triggers are executed synchronously and can target more execution phases (e.g. <code>Validation</code>), whereas <strong>In background</strong> triggers are executed asynchronously and only support <code>Post Execution</code> phase. As a rule of thumb, <code>In Process</code> should not be chosen for heavy operations that are time-consuming.</p><p>When creating a <code>Trigger Condition</code>, you first select on which <code>Definition</code> the condition will be assessed on (e.g. <code>M.Asset</code>). Then you set the Condition by selecting the property/relation of the selected Definition and the value you are targeting. For example, a condition could be: When the <code>Current Value</code> of <code>Title</code> property of <code>M.Asset</code> definition <code>equals</code> to <code>Hola</code>.</p><p><img class="boxed" src="/images/trigger-condition.png" style="max-width:400px" alt="Trigger Condition Configuration"></p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions:"></a>Actions:</h2><blockquote><p>In Sitecore Content Hub, Actions are components that perform a specific task. <sup><a href="#actions">2</a></sup></p></blockquote><p>As of Content Hub 3.2, an Action can be created as any of these types: <code>Action script</code>, <code>API call</code>, <code>Azure event hub</code>, <code>Azure service bus</code>, <code>M Azure service bus</code>, <code>Print entity generation</code>,  <code>Reporting channel</code>, and <code>Start state machine</code>. Actions can be configured using the UI and are found under <strong>Admin</strong> -&gt; <strong>Actions</strong>.</p><p>Most of these are configured by entering an endpoint URL (e.g. API Call) or a connection string (e.g. Azure event hub). Others execute tasks that are specific to Content Hub and has been pre-configured (e.g. Reporting Channel). <code>Action script</code> is an action that will execute a Content Hub script of type action -see scripts section below. </p><p>Actions usually send a payload in the request body (as json) or headers. This usually includes a <code>TargetId</code> specifying the entity being processed.  </p><p><strong>Note:</strong> Some action types require a response (e.g. API call). Not returning a response before the request times out might cause the action to send multiple requests. A queue type should be considered for heavy processes.</p><p><img class="boxed" src="/images/action-api-call.png" style="max-width:400px" alt="Action API Call Configuration"></p><h2 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts:"></a>Scripts:</h2><blockquote><p>Sitecore Content Hub allows users to integrate custom scripts in their business logic. Scripts can be manually triggered by end-users or automatically triggered by the application (e.g. using Triggers) depending on the script type and the use case. Sitecore Content Hub offers different script types, with each type having different context properties. <sup><a href="#scripts">3</a></sup></p></blockquote><p>A script is a piece of C# code that executes when invoked (via URL or trigger) and compiled in Content Hub. They can be configured using the UI and are found under Admin-&gt;Scripts.</p><p>As of Content Hub 3.2, a Script can be created as any of these types: <code>Action</code>, <code>Metadata processing</code>, <code>User pre-registration</code>, <code>User post-registration</code> and <code>User sign-in</code>.</p><p>The type of script dictates the context where it’s run and the properties available. The most commonly used is Action.</p><p>When invoked by triggers, action scripts can be executed synchronously (<code>restricted</code>) and asynchronously (<code>unrestricted</code>). Restricted scripts have a limited range of libraries than can be referenced/used <sup><a href="#libraries-restriction">4</a></sup>. </p><p><img class="boxed" src="/images/script-action.png" style="max-width:600px" alt="Action Script"></p><p>====================</p><p>References:<br>[1] <a name="triggers" href="https://docs.stylelabs.com/content/integrations/intergration-components/triggers/overview.html" target="_blank" rel="noopener"> https://docs.stylelabs.com/content/integrations/intergration-components/triggers/overview.html </a><br>[2] <a name="scripts" href="https://docs.stylelabs.com/content/integrations/scripting-api/scripting-api-overview.html" target="_blank" rel="noopener"> https://docs.stylelabs.com/content/integrations/scripting-api/scripting-api-overview.html </a><br>[3] <a name="actions" href="https://docs.stylelabs.com/content/integrations/intergration-components/actions/overview.html" target="_blank" rel="noopener"> https://docs.stylelabs.com/content/integrations/intergration-components/actions/overview.html </a><br>[4] <a name="libraries-restriction" href="https://docs.stylelabs.com/content/integrations/scripting-api/restricted-scripts.html" target="_blank" rel="noopener"> https://docs.stylelabs.com/content/integrations/scripting-api/restricted-scripts.html </a></p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/trigger-action-script.jpg&quot; alt=&quot;Content Hub Trigger, Action, Script&quot;&gt;&lt;/h2&gt;&lt;p&gt;What are Content Hub Triggers, Actions and Scripts, and what are they used for?&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Content Hub" scheme="https://josedbaez.com/categories/Sitecore/Content-Hub/"/>
    
    
      <category term="stylelabs" scheme="https://josedbaez.com/tags/stylelabs/"/>
    
      <category term="action" scheme="https://josedbaez.com/tags/action/"/>
    
      <category term="trigger" scheme="https://josedbaez.com/tags/trigger/"/>
    
      <category term="script" scheme="https://josedbaez.com/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>Tips when indexing Polygons with Sitecore and Solr</title>
    <link href="https://josedbaez.com/2019/07/sitecore-polygon-search-part2/"/>
    <id>https://josedbaez.com/2019/07/sitecore-polygon-search-part2/</id>
    <published>2019-07-15T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/sitecore-solr-spatial-tips.png" alt="Sitecore Solr GeoJson"></h2><p>How to store and search on geojson polygons in sitecore.<br><a id="more"></a></p><p><em>Versions used: Sitecore Experience Platform 9.0 rev. 180604 (Update-2).</em></p><p>This is a follow-up post on my <a href="/2019/07/sitecore-polygon-search/">previous one</a> regarding polygon search with Sitecore and solr. It’s a list of things I learned, whilst implementing on a project, that will hopefully save you some debugging time.</p><ul><li>If you get error <code>Unsupported expression node type: Quote</code> when running the extension function, it means you are still using one or 2 default classes. Make sure you are referring all classes from the <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons" target="_blank" rel="noopener">repo</a>.</li><li>If you get an error at indexing time, make sure the data being stored is a valid <a href="https://geojson.org/" target="_blank" rel="noopener">GeoJSON</a> object.<br>– e.g. this is a valid polygon <code>{ &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;MultiPolygon&quot;, &quot;coordinates&quot;: [ [ [ [ 20.18, 46.2 ], [ 20.2, 46.26 ], [ 20.32, 46.26 ], [ 20.34, 46.22 ], [ 20.38, 46.22 ], [ 20.38, 46.160000000000004 ], [ 20.22, 46.160000000000004 ], [ 20.18, 46.2 ] ] ] ] } }</code></li><li>Ross Cartwright pointed out <code>queryable.ToList()</code> works fine, but <code>queryable.GetResults()</code> fails. We actually avoided using <code>GetResults()</code> throughout the project because it was slower than <code>ToList()</code>. You’ll need to debug to find out why it fails.</li><li>Make sure you <a href="https://lucene.apache.org/solr/guide/6_6/spatial-search.html" target="_blank" rel="noopener">read</a> about the differences between <code>RPT</code> and <code>RptWithGeometrySpatialField</code><br>– If you end up using <code>RptWithGeometrySpatialField</code>, see <code>optional in-memory cache</code></li><li>There’s a limit on the amount of data being sent -at once- to solr, and this can also decrease performance, so be mindful on the polygon size being used. On my project, we were indexing cities and a polygon could easily reach 5MB. We used <a href="https://nominatim.openstreetmap.org/search.php" target="_blank" rel="noopener">openstreemap</a> to generate <a href="http://polygons.openstreetmap.fr/" target="_blank" rel="noopener">non-perfect versions</a> of the polygons which are quite smaller.</li><li><code>RPT</code> and <code>RptWithGeometrySpatialField</code> can index bounding boxes as long as you store them as polygons.<br>– e.g. <code>{ &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 20.2024989, 46.2431191 ], [ 20.356019, 46.2431191 ], [ 20.356019, 46.1757964 ], [ 20.2024989, 46.1757964 ], [ 20.2024989, 46.2431191 ] ] ] } }</code> would work but <code>[ &quot;46.1757964&quot;, &quot;46.2431191&quot;, &quot;20.2024989&quot;, &quot;20.356019&quot; ]</code> won’t.</li><li>If storing multi-polygons that overlap, set <code>allowMultiOverlap</code> to true when defining your <code>dynamicField</code>.</li></ul><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/sitecore-solr-spatial-tips.png&quot; alt=&quot;Sitecore Solr GeoJson&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to store and search on geojson polygons in sitecore.&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Solr" scheme="https://josedbaez.com/categories/Sitecore/Solr/"/>
    
    
      <category term="Sitecore" scheme="https://josedbaez.com/tags/Sitecore/"/>
    
      <category term="spatial" scheme="https://josedbaez.com/tags/spatial/"/>
    
      <category term="Solr" scheme="https://josedbaez.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Polygon search with Sitecore and Solr</title>
    <link href="https://josedbaez.com/2019/07/sitecore-polygon-search/"/>
    <id>https://josedbaez.com/2019/07/sitecore-polygon-search/</id>
    <published>2019-07-03T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/london-polygon-world.png" alt="Sitecore Solr GeoJson"></h2><p>How to store and search on geojson polygons in sitecore.<br><a id="more"></a></p><p><em>Versions used: Sitecore Experience Platform 9.0 rev. 180604 (Update-2).</em></p><p><strong>Update:</strong><br>Make sure you read my <a href="/2019/07/sitecore-polygon-search-part2">follow-up post</a> with some tips about this implementation.</p><p>On this post, I will be going through implementation on how to index fields that contain GeoJson polygons and a Linq extension that allows searching for points that intersect the polygons. Full source code <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons" target="_blank" rel="noopener">here</a>.</p><p>In order to follow the same approach taken by Sitecore, we need to create a new index provider. The provider uses a Search Context that exposes a GetQueryable function with the ability to trigger our custom intersect method. </p><p>You’ll need to define the spatial field type in Solr. See my <a href="/2019/06/solr-dynamic-spatial-fields">previous post</a> on how to do this.</p><p>The <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons" target="_blank" rel="noopener">implementation</a> looks long but it’s mostly inheriting from base Sitecore classes. It is basically an extension from <a href="https://github.com/ehabelgindy/sitecore-solr-spatial" target="_blank" rel="noopener">ehabelgindy’s WithinRadius implementation</a> which is now part of Sitecore code base. </p><p>I decided to use a custom index and a computed field. You could create a new Sitecore field type and map it to a solr spatial field type instead, but I had issues with this when using custom indexes.</p><p>My custom index configuration looks like:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contentSearch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">indexConfigurations</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultSolrIndexConfiguration</span> <span class="attr">type</span>=<span class="string">"Sitecore.ContentSearch.SolrProvider.SolrIndexConfiguration, Sitecore.ContentSearch.SolrProvider"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldMap</span> <span class="attr">type</span>=<span class="string">"Sitecore.ContentSearch.SolrProvider.SolrFieldMap, Sitecore.ContentSearch.SolrProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">typeMatches</span> <span class="attr">hint</span>=<span class="string">"raw:AddTypeMatch"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">typeMatch</span> <span class="attr">typeName</span>=<span class="string">"geojsonrptgeom"</span> <span class="attr">type</span>=<span class="string">"System.String"</span> <span class="attr">fieldNameFormat</span>=<span class="string">"&#123;0&#125;_grptgeom"</span> <span class="attr">settingType</span>=<span class="string">"Sitecore.ContentSearch.SolrProvider.SolrSearchFieldConfiguration, Sitecore.ContentSearch.SolrProvider"</span> <span class="attr">patch:before</span>=<span class="string">"*[1]"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">typeMatches</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldMap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">defaultSolrIndexConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">indexConfigurations</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span> <span class="attr">type</span>=<span class="string">"Sitecore.ContentSearch.ContentSearchConfiguration, Sitecore.ContentSearch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">indexes</span> <span class="attr">hint</span>=<span class="string">"list:AddIndex"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">index</span> <span class="attr">id</span>=<span class="string">"sc9xp0_spatial_master"</span> <span class="attr">type</span>=<span class="string">"Sitecore.Spatial.GeoJson.Providers.Solr.SolrSearchIndex, Sitecore.Spatial.GeoJson"</span> <span class="attr">role:require</span>=<span class="string">"Standalone OR ContentManagement"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span> <span class="attr">ref</span>=<span class="string">"contentSearch/indexConfigurations/defaultSolrIndexConfiguration"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentOptions</span> <span class="attr">ref</span>=<span class="string">"contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentOptions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fields</span> <span class="attr">hint</span>=<span class="string">"raw:AddComputedIndexField"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">field</span> <span class="attr">fieldName</span>=<span class="string">"polygon"</span> <span class="attr">returnType</span>=<span class="string">"geojsonrptgeom"</span>&gt;</span>Sitecore.Spatial.GeoJson.ComputedFields.Polygon, Sitecore.Spatial.GeoJson<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fields</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentOptions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">       ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">index</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">indexes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contentSearch</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Here, I’m adding a typeMatch <code>geojsonrptgeom</code> and mapping it to solr dynamic type <code>grptgeom</code>. I’m then adding a computed field that returns this typeMatch. As you can <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/ComputedFields/Polygon.cs" target="_blank" rel="noopener">see</a>, the computed field is just returning the value entered on the field.</p><p>Note the custom provider <code>Sitecore.Spatial.GeoJson.Providers.Solr.SolrSearchIndex, Sitecore.Spatial.GeoJson</code> set on index type property.</p><p>As stated before, there are couple of custom classes that are basically inheriting from base and initialising instances of the custom ones: <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/Providers/Solr/SolrSearchIndex.cs" target="_blank" rel="noopener">SolrSearchIndex.cs</a>, <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/Providers/Solr/SolrSearchContext.cs" target="_blank" rel="noopener">SolrSearchContext.cs</a>, <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/Providers/Solr/LinqToSolrIndex.cs" target="_blank" rel="noopener">LinqToSolrIndex.cs</a>, <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/Linq/ExpressionParser.cs" target="_blank" rel="noopener">ExpressionParser.cs</a>.</p><p><a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/Providers/Solr/LinqToSolrIndex.cs" target="_blank" rel="noopener">LinqToSolrIndex.cs</a> initialises a new QueryMapper <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons/blob/master/src/Providers/Solr/SolrQueryMapper.cs" target="_blank" rel="noopener">SolrQueryMapper.cs</a> that contains the new spatial function that will generate the Solr <code>Intersects</code> query.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> AbstractSolrQuery <span class="title">VisitInsidePolygon</span>(<span class="params">InsidePolygonNode node, SolrQueryMapperState state</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractSolrQuery abstractSolrQuery = <span class="keyword">new</span> SolrQueryByField(node.Field, <span class="string">$"Intersects(<span class="subst">&#123;node.Coordinate.Latitude&#125;</span> <span class="subst">&#123;node.Coordinate.Longitude&#125;</span>)"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!abstractSolrQuery)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> abstractSolrQuery &amp; <span class="keyword">this</span>.Visit(node.SourceNode, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> abstractSolrQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now that we have the SolrQuery method, we just need to create a Linq Extension so we can easily call this method when querying the index.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">QueryableExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IQueryable&lt;TSource&gt; InsidePolygon&lt;TSource, TKey&gt;(<span class="keyword">this</span> IQueryable&lt;TSource&gt; source, Expression&lt;Func&lt;TSource, TKey&gt;&gt; keySelector, Coordinate center)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> method = ((MethodInfo)MethodBase.GetCurrentMethod()).MakeGenericMethod(<span class="keyword">typeof</span>(TSource), <span class="keyword">typeof</span>(TKey));</span><br><span class="line">        <span class="keyword">var</span> arguments = <span class="keyword">new</span> Expression[<span class="number">3</span>]</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            source.Expression,</span><br><span class="line">                                            Expression.Quote(keySelector),</span><br><span class="line">                                            Expression.Constant(center, <span class="keyword">typeof</span>(Coordinate))</span><br><span class="line">                                        &#125;;</span><br><span class="line">        <span class="keyword">return</span> source.Provider.CreateQuery&lt;TSource&gt;((Expression)Expression.Call(<span class="literal">null</span>, method, arguments));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This will allow us to build queries that use this extension like:<br><code>var queryable = context.GetQueryable&lt;PolygonResultItem&gt;().InsidePolygon(s =&gt; s.Polygon, new Coordinate(lat, lng));</code></p><p><strong>Note:</strong> <code>Intersects</code> can be done via Queries or Filter Queries. This implementation uses Queries. For more information on filter queries, see <a href="https://github.com/SolrNet/SolrNet/blob/master/Documentation/Querying.md#filter-queries" target="_blank" rel="noopener">solr documentation</a>.</p><p>The demo on the <a href="https://github.com/josedbaez/sitecore-spatial-geojson-polygons" target="_blank" rel="noopener">source code</a> provides a template with the spatial field, couple of sample items with polygons from <a href="https://nominatim.openstreetmap.org/search.php" target="_blank" rel="noopener">openstreetmap</a> that cover some cities; and a controller rendering that reads <code>lat</code> and <code>lng</code> from the querystring and returns the polygon of the item found (e.g. Big Ben’s coordinates <a href="http://sc9xp0.sc/?lat=-0.1268141&amp;lng=51.5007292" target="_blank" rel="noopener">http://sc9xp0.sc/?lat=-0.1268141&amp;lng=51.5007292</a> will return London).</p><p><img class="hero-img" src="/images/london-polygon.png" alt="Greater London Polygon"></p><p>====================<br>References:<br><a href="https://github.com/ehabelgindy/sitecore-solr-spatial" target="_blank" rel="noopener">https://github.com/ehabelgindy/sitecore-solr-spatial</a><br><a href="https://developers.google.com/maps/documentation/javascript/datalayer" target="_blank" rel="noopener">https://developers.google.com/maps/documentation/javascript/datalayer</a><br><a href="https://developers.google.com/maps/documentation/javascript/importing_data" target="_blank" rel="noopener">https://developers.google.com/maps/documentation/javascript/importing_data</a><br><a href="https://stackoverflow.com/a/42127338/991459" target="_blank" rel="noopener">https://stackoverflow.com/a/42127338/991459</a><br><a href="https://lucene.apache.org/solr/guide/6_6/spatial-search.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/guide/6_6/spatial-search.html</a><br><a href="https://github.com/ehabelgindy/sitecore-solr-spatial" target="_blank" rel="noopener">https://github.com/ehabelgindy/sitecore-solr-spatial</a><br><a href="http://polygons.openstreetmap.fr/index.py" target="_blank" rel="noopener">http://polygons.openstreetmap.fr/index.py</a><br><a href="https://nominatim.openstreetmap.org/search.php" target="_blank" rel="noopener">https://nominatim.openstreetmap.org/search.php</a></p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/london-polygon-world.png&quot; alt=&quot;Sitecore Solr GeoJson&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to store and search on geojson polygons in sitecore.&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Solr" scheme="https://josedbaez.com/categories/Sitecore/Solr/"/>
    
    
      <category term="Sitecore" scheme="https://josedbaez.com/tags/Sitecore/"/>
    
      <category term="spatial" scheme="https://josedbaez.com/tags/spatial/"/>
    
      <category term="Solr" scheme="https://josedbaez.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Add dynamic geojson fields to Solr</title>
    <link href="https://josedbaez.com/2019/06/solr-dynamic-spatial-fields/"/>
    <id>https://josedbaez.com/2019/06/solr-dynamic-spatial-fields/</id>
    <published>2019-06-30T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/solr-spatial.jpg" alt="Solr Spatial"></h2><p>How to add dynamic geojson fields to Solr 6 to index and search geospatial data.<br><a id="more"></a></p><p><em>Versions used: Solr 6.6.3.</em></p><p>Solr supports indexing spatial fields on industry standards: <a href="https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry" target="_blank" rel="noopener">WKT</a> and <a href="https://geojson.org/" target="_blank" rel="noopener">GeoJSON</a>. In this post, I’ll be going through indexing spatial fields on GeoJSON format, especially to index polygons.</p><p>First, you need to choose between <a href="https://lucene.apache.org/solr/guide/6_6/spatial-search.html#SpatialSearch-RPT" target="_blank" rel="noopener">SpatialRecursivePrefixTreeFieldType (RPT)</a> or <a href="https://lucene.apache.org/solr/guide/6_6/spatial-search.html#SpatialSearch-RptWithGeometrySpatialField" target="_blank" rel="noopener">RptWithGeometrySpatialField (RPT with Geometry)</a>. Both support indexing polygons but there are a couple of technical differences that can suit your needs better. I chose RPT with Geometry.</p><p>For polygon support, you will need <a href="https://sourceforge.net/projects/jts-topo-suite/" target="_blank" rel="noopener">JTS Topology Suite</a>. Navigate to this <a href="https://repo1.maven.org/maven2/com/vividsolutions/jts-core/" target="_blank" rel="noopener">URL</a>, click on required version and download file <strong>jts-core-VERSION#.jar</strong>. This file should be copied to: <strong>Solr Installation Folder\server\solr-webapp\webapp\WEB-INF\lib\</strong></p><p>Add the new field type to your Solr index schema.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- RPT --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"geojson_rpt"</span> <span class="attr">class</span>=<span class="string">"solr.SpatialRecursivePrefixTreeFieldType"</span> <span class="attr">spatialContextFactory</span>=<span class="string">"JTS"</span> <span class="attr">geo</span>=<span class="string">"true"</span> <span class="attr">format</span>=<span class="string">"GeoJSON"</span> <span class="attr">autoIndex</span>=<span class="string">"true"</span> <span class="attr">validationRule</span>=<span class="string">"repairBuffer0"</span> <span class="attr">distErrPct</span>=<span class="string">"0.025"</span> <span class="attr">maxDistErr</span>=<span class="string">"0.001"</span> <span class="attr">distanceUnits</span>=<span class="string">"kilometers"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- RPT with geometry --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"geojson_rptgeom"</span> <span class="attr">class</span>=<span class="string">"solr.RptWithGeometrySpatialField"</span> <span class="attr">spatialContextFactory</span>=<span class="string">"JTS"</span> <span class="attr">geo</span>=<span class="string">"true"</span> <span class="attr">format</span>=<span class="string">"GeoJSON"</span> <span class="attr">autoIndex</span>=<span class="string">"true"</span> <span class="attr">validationRule</span>=<span class="string">"repairBuffer0"</span> <span class="attr">distErrPct</span>=<span class="string">"0.15"</span> <span class="attr">maxDistErr</span>=<span class="string">"0.001"</span> <span class="attr">distanceUnits</span>=<span class="string">"kilometers"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>Then, add a dynamic field that maps to the newly defined field type.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dynamicField</span> <span class="attr">name</span>=<span class="string">"*_grpt"</span> <span class="attr">type</span>=<span class="string">"geojson_rpt"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">allowMultiOverlap</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dynamicField</span> <span class="attr">name</span>=<span class="string">"*_grptgeom"</span> <span class="attr">type</span>=<span class="string">"geojson_rptgeom"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">allowMultiOverlap</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>Once you have done this, you can store GeoJson data on these fields and run Spatial searches against them. The best way to test if it works is by storing a value. If it’s invalid, Solr will throw and error than can be seen in the lgos.</p><p>e.g. The following filter query will return documents that intersect the given coordinate.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">polygon_grpt:&quot;Intersects(19.0497665 47.4916717)&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Notes:</strong></p><ul><li>distErrPct and maxDistErr can be tweaked for less accuracy and faster performance.</li><li>Solr recommends to not store these field types as it would be redundant and will increase index size.<blockquote><p>When using this field type, you will likely not want to mark the field as stored because it’s redundant with the DocValues data and surely larger because of the formatting (be it WKT or GeoJSON). <a href="https://lucene.apache.org/solr/guide/6_6/spatial-search.html#SpatialSearch-RptWithGeometrySpatialField" target="_blank" rel="noopener">Source</a></p></blockquote></li><li>On the same link, Solr mentions an in-memory cache that can be enabled to improve performance.<blockquote><p>An optional in-memory cache can be defined in solrconfig.xml, which should be done when the data tends to have shapes with many vertices. </p></blockquote></li></ul><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/solr-spatial.jpg&quot; alt=&quot;Solr Spatial&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to add dynamic geojson fields to Solr 6 to index and search geospatial data.&lt;br&gt;
    
    </summary>
    
      <category term="Solr" scheme="https://josedbaez.com/categories/Solr/"/>
    
    
      <category term="spatial" scheme="https://josedbaez.com/tags/spatial/"/>
    
  </entry>
  
  <entry>
    <title>Add a non-listed language to Sitecore</title>
    <link href="https://josedbaez.com/2019/04/sitecore-add-non-listed-language/"/>
    <id>https://josedbaez.com/2019/04/sitecore-add-non-listed-language/</id>
    <published>2019-04-13T00:00:00.000Z</published>
    <updated>2019-11-17T18:10:22.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img class="hero-img" src="/images/greetings-sitecore.jpg" alt="Greetings"></h2><p>How to add Sitecore languages without patching LanguageDefinitions.config.<br><a id="more"></a></p><p><em>Versions used: Sitecore Experience Platform 9.0 rev. 180604 (Update-2).</em></p><p>Sitecore supports any language that is registered in the operating system where it runs. See my <a href="/2019/04/supported-cultures">previous post</a> to see how to render a list of available languages on a server. When adding a new language in sitecore, the modal dialog loads defined languages (<code>\App_Config\LanguageDefinitions.config</code>) into the dropdown. When you select a language from the dropdown, the properties of that language definition are set to the appropriate inputs.</p><p>When you click next, sitecore will verify 2 things:<br>1- If the language already exists -gets language items from cache or by querying Database by language template ID.<br>2- The provided Language code combination (Language  + “-“ + Region + “-“ CustomCode) is a valid culture (using <code>System.Globalization.CultureInfo.GetCultureInfo</code>).</p><p>The selected option on the dropdownn is not used for the validation, hence it is not required (I’m not debating best practice here) to define new languages inside <code>LanguageDefinitions.config</code>. You can select the blank option; as long as you enter a valid culture (existing in the operating system), sitecore will create the language item. If the culture is invalid, you will get an error like <code>The name &quot;xxxxxx&quot; is not a valid or supported culture identifier</code>.</p><p>Sometimes it’s confusing to figure out the language code combination that needs to be entered on this modal or in <code>LanguageDefinitions.config</code>. From the table on my <a href="/2019/04/supported-cultures">previous post</a>, the last 2 columns (<code>Language</code> and <code>Country/region code</code>) go in the inputs with the same names.<br>e.g. for <code>Bosnian (Latin, Bosnia and Herzegovina)</code>, you’d enter <code>bs-Latn</code> in Language and <code>BA</code> in Country/region code.</p><p>As for the next step on the creation modal, I have not found a reliable source listing <code>Codepage</code> and <code>Charset</code> for all languages out there, so do your own research. If you do have one, please let me!. </p><hr><p>Please let me know what you think and/or if you can spot any errors.<br><em>/eom</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img class=&quot;hero-img&quot; src=&quot;/images/greetings-sitecore.jpg&quot; alt=&quot;Greetings&quot;&gt;&lt;/h2&gt;&lt;p&gt;How to add Sitecore languages without patching LanguageDefinitions.config.&lt;br&gt;
    
    </summary>
    
      <category term="Sitecore" scheme="https://josedbaez.com/categories/Sitecore/"/>
    
      <category term="Globalization" scheme="https://josedbaez.com/categories/Sitecore/Globalization/"/>
    
    
      <category term="globalization" scheme="https://josedbaez.com/tags/globalization/"/>
    
      <category term="multilingual" scheme="https://josedbaez.com/tags/multilingual/"/>
    
  </entry>
  
</feed>
